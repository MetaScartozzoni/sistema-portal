openapi: 3.0.3
info:
  title: BOT API
  version: 0.1.0
servers:
  - url: http://localhost:3001
paths:
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
              required: [name, email, password]
      responses:
        '201': { description: Created }
        '409': { description: Email already registered }
  /auth/login:
    post:
      summary: Login and receive JWT + cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string }
              required: [email, password]
      responses:
        '200': { description: OK }
        '401': { description: Invalid credentials }
  /auth/logout:
    post:
      summary: Logout and clear cookie
      responses:
        '200': { description: OK }
  /me:
    get:
      summary: Current user
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /health:
    get:
      summary: Health check
      responses:
        '200': { description: OK }
  /metrics:
    get:
      summary: Metrics placeholder
      responses:
        '200': { description: OK }
  /projects:
    get:
      summary: List projects
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: search
          schema: { type: string }
      responses:
        '200': { description: OK }
    post:
      summary: Create project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
              required: [name]
      responses:
        '201': { description: Created }
  /projects/{id}:
    get:
      summary: Get project
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    put:
      summary: Update project
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    patch:
      summary: Patch project
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete project
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
  /bots:
    get:
      summary: List bots
      responses:
        '200': { description: OK }
    post:
      summary: Create bot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                projectId: { type: string }
              required: [name, projectId]
      responses:
        '201': { description: Created }
  /bots/{id}:
    get:
      summary: Get bot
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    put:
      summary: Update bot
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    patch:
      summary: Patch bot
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete bot
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
  /bots/{id}/activate:
    post:
      summary: Activate bot
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /bots/{id}/pause:
    post:
      summary: Pause bot
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /bots/{botId}/flows:
    get:
      summary: List flows
      parameters:
        - in: path
          name: botId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    post:
      summary: Create flow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                jsonDefinition: { }
              required: [name, jsonDefinition]
      responses:
        '201': { description: Created }
  /flows/{id}:
    get:
      summary: Get flow
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    put:
      summary: Update flow
      responses:
        '200': { description: OK }
    patch:
      summary: Patch flow
      responses:
        '200': { description: OK }
    delete:
      summary: Delete flow
      responses:
        '204': { description: Deleted }
  /bots/{botId}/messages:
    get:
      summary: List messages
      parameters:
        - in: path
          name: botId
          required: true
          schema: { type: string }
        - in: query
          name: direction
          schema: { type: string, enum: [IN, OUT] }
        - in: query
          name: limit
          schema: { type: integer }
      responses:
        '200': { description: OK }
    post:
      summary: Create OUT message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                direction: { type: string, enum: [IN, OUT], default: OUT }
                content: { type: string }
                metadata: { }
              required: [content]
      responses:
        '201': { description: Created }
  /webhooks/messages:
    post:
      summary: Receive IN message via webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botId: { type: string }
                content: { type: string }
                metadata: { }
              required: [botId, content]
      responses:
        '202': { description: Accepted }

